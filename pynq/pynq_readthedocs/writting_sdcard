
# Precaucion
Sea cuidadoso, dd puede modificar sus particiones y usted morirá
Recuerde que los adaptadores de microSD suelen tener un lock de readonly
	Suponiendo que la flecha apunta hacia abajo
		-arriba: desbloqueada
		-abajo: readonly

# Encontrar el dispositivo

Para conocer el nombre de la tarjeta, se utilizará el siguiente comando
	$ df -h

lo ejecutamos antes y después de insertarla y comparamos

el nombre de la partición puede ser similar a
	- /dev/mmcblk0p1
	- /dev/sdd1
el 1 hace referencia a que es una partición. Pero no nos interesa eso, sino el dispositivo completo

con lo que trabajaremos con
	- /dev/mmcblk0p0
	- /dev/sdd
dependiendo del nombre de la partición (PD: sdd va sin 0)

con esto tenemos <nombre_particion> y <nombre_dispositivo>

# Desmontar el dispositivo

$ sudo umount <nombre_particion>
hay que hacer esto con todas las particiones que pudieran haber

ej $ sudo umount <particion1> <particion2> ...

# Escribiendo la imagen

$ sudo dd bs=4M if=<nombre_imagen> of=<nombre_dispositivo>

ej: $ sudo dd bs=4M if=pynq_ver.img of=/dev/sdd

IMPORTANTE: no confundir el nombre de dispositivo con particion.

si no funciona con bloques de 4M tocará utilizar 1M, aunque añadirá mayor demora

en vez de dd se puede  utilizar dcfldd




## Conceptos importantes

- everything is a file
	paradigma al que linux se apega, todo dispositivo es tratado como un archivo, por ello es que la tarjeta se trabaja como si fuera uno

- df
	disk free
	Herramienta que lista el espacio disponible

- dd
	herramienta que permite modificar y copiar archivos
	como los dispositivos son archivos...

	no tiene nada que indique el progreso, por lo que solo queda ser pacientes

	https://www.linuxjournal.com/article/1320

- dcfldd
	se basa en dd para mejorarlo, tiene funciones para calcular el hashing, indica el progreso, verificación de integridad de
	la copia, etc
